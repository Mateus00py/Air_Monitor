P1

Codificou classes:
A classe main activity serve pra mostrar uma atividade no android

Codificou atributos:
co2 e glp são exemplos de atributos dentro das classes eles servem pra mostrar um botão em forma de imagem no front-end e o tipo deles é imagebutton

Codificou métodos:
Método setOnClickListener é um metodo que reage ao usuario ele e ele define oque vai a acontecer quando o usuario clicar no botão

Codificou  atributos protegidos e/ou privados:
O atributo private ImageButton temp serve pra garantir deles não serem acessados diretamente de fora da classe
sem contar que facilita muito futuras manutenções que deve ocorrer que é uma boa pratica na programação orientada a objeto

Codificou métodos protegidos e/ou privados:
O método onClick nos botões são privados pq não tem a nessecidade de acessalos fora da classe que ele esta

instanciou objetos:
A Instância de objeto na classe GlpActivity foi colocada para quando o botão for clicado 

Identificou e codificou classes de comportamento:
A classe Co2Activity representa uma classe de comportamento ela basicamente serve pra definir com as atividades vão se portar no app

Ocultou informações usando atributos e/ou métodos protected/private:
foi usado atributos e métodos privados para controlar melhor o comportamento da classe como o método onClick e o atributo umid

Código Limpo:
nomes pequenos mas descritivos como temp, umid, co2, glp deixando assim sua função clara e de facil atendimento
Sem Duplicação de Código
Indentação e Espaçamento Consistentes

P2

Codificou atributos estáticos
	O atributo estático SPLASH_TIME_OUT, da classe SplashActivity,
	representa a duração do tempo de exibição da tela de introdução,
	sendo compartilhado por todas as instâncias para garantir clareza e eficiência no código.
	O nome e tipo foram escolhidos para indicar a finalidade do atributo e manter consistência
	na representação de valores de tempo em milissegundos.

Codificou métodos construtores
	embora não haja um construtor explícito na classes, ela ainda tem um construtor implicitamente 
	herdado da classe base AppCompatActivity. Isso é comum em Java, onde, se não for fornecido um construtor explícito, 
	a classe base fornece um construtor padrão (sem argumentos) que pode ser chamado implicitamente.

Instalou e usou bibliotecas de terceiros
	Biblioteca: mpandroidchart, Essa biblioteca é usada para criar gráficos interativos no Android.

Codificou enums
	enumeração chamada EstadoTemperatura, que representa os estados possíveis da temperatura.

Codificou propriedades
	Tipo: TextView
	Descrição: Representa uma propriedade que armazena a referência a um elemento TextView no layout da atividade.
	 	   É usada para exibir na interface do usuário como temperatura.
	Tipo: LineChart
	Descrição: É uma propriedade que mantém a referência a um gráfico de linha (LineChart) da biblioteca MPAndroidChart.
		   Essa propriedade é usada para configurar e atualizar o gráfico com dados de temperatura.

Identificou e codificou classes de dados
	 há uma enumeração que é usada para representar estados de (BAIXA e ALTA) e seus limites correspondentes. 
	 Essa enumeração pode ser considerada uma classe de dados, embora seja uma estrutura leve usada para definir
	 constantes relacionadas ao estado .

Codificou classes imutáveis
	Classes imutáveis, como a enumeração EstadoTemperatura, proporcionam estabilidade e previsibilidade ao código, 
	evitando alterações inadvertidas de estados. Elas são thread-safe, facilitam o uso em estruturas como switch e contribuem 
	para uma semântica coesa, promovendo segurança e facilidade de teste.

Usou conceitos de SOLID

	Princípio da Responsabilidade Única (SRP):
	Cada método no código tem uma responsabilidade única e bem definida. 
	Por exemplo, os métodos atualizarGrafico, atualizarTextView, verificarTemperatura e enviarNotificacao realizam tarefas específicas relacionadas a gráficos, 
	atualizações de interface do usuário e manipulação de notificações.

	Princípio Aberto/Fechado (OCP):
	O código é extensível para a adição de novos comportamentos ou funcionalidades 
	sem a necessidade de modificar as classes existentes. Isso pode ser observado, por exemplo, ao adicionar novos métodos 
	ou lógica específica sem alterar os métodos existentes.

UML

	o diagrama UML oferece uma visão visual da estrutura e interações da classe MainActivity em um aplicativo Android, destacando sua dependência e interação com os botões de imagem,
	bem como a divisão de responsabilidades entre os métodos onCreate e setListeners
